package eval

import "os"

// Variable represents an elvish variable.
type Variable interface {
	Set(v Value)
	Get() Value
}

type ptrVariable struct {
	valuePtr *Value
}

func newPtrVariable(v Value) Variable {
	return ptrVariable{&v}
}

func (iv ptrVariable) Set(val Value) {
	*iv.valuePtr = val
}

func (iv ptrVariable) Get() Value {
	return *iv.valuePtr
}

// listElem is the Variable generated by indexing a List.
type listElem struct {
	parent List
	idx    int
}

func (le listElem) Set(val Value) {
	(*le.parent.inner)[le.index()] = val
}

func (le listElem) Get() Value {
	return (*le.parent.inner)[le.index()]
}

func (le listElem) index() int {
	idx := le.idx
	if idx < 0 {
		idx += len(*le.parent.inner)
	}
	if idx < 0 || idx >= len(*le.parent.inner) {
		throw(indexOutOfRange)
	}
	return idx
}

// mapElem is the Variable generated by indexing a Map.
type mapElem struct {
	parent Map
	idx    Value
}

func (me mapElem) Set(val Value) {
	(*me.parent.inner)[me.idx] = val
}

func (me mapElem) Get() Value {
	return (*me.parent.inner)[me.idx]
}

type envVariable struct {
	name string
}

func newEnvVariable(name string) envVariable {
	return envVariable{name}
}

func (ev envVariable) Set(val Value) {
	os.Setenv(ev.name, ToString(val))
}

func (ev envVariable) Get() Value {
	return String(os.Getenv(ev.name))
}
